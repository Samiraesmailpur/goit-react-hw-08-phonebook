{"version":3,"file":"static/js/751.59221bd7.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nconst ContactsForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  padding: 40px;\n  border: 1px solid #fff;\n  margin: 0 auto;\n  margin-top: 30px;\n`;\n\nconst Input = styled(Field)`\n  padding: 5px;\n  margin-bottom: 20px;\n`;\n\nconst Button = styled.button`\n  background-color: #fff;\n  border: none;\n  color: white;\n  padding: 10px 22px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  min-width: 100px;\n  cursor: pointer;\n  margin: 10px auto;\n  color: #0d47a1;\n  font-weight: 600;\n`;\n\nconst Text = styled.label`\n  color: #ffff;\n  margin-bottom: 10px;\n`;\n\nconst Title = styled.h1`\n  color: #fff;\n  text-align: center;\n`;\n\nexport { ContactsForm, Input, Button, Text, Title };\n","export const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filters.filters;\nexport const selectIsLoading = state => state.isLoading;\nexport const selectError = state => state.error;\n","import React from 'react';\nimport { Formik } from 'formik';\nimport { ContactsForm, Input, Button, Text, Title } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport * as yup from 'yup';\n\nconst scheme = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.number().required(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const checkIfNameIsUnique = name => {\n    return contacts.every(contact => {\n      if (contact.name.toLowerCase() === name.toLowerCase()) {\n        alert(`${contact.name} is already in contacts`);\n        return false;\n      }\n      return true;\n    });\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const name = values.name;\n    const number = values.number;\n    if (checkIfNameIsUnique(name)) {\n      dispatch(\n        addContact({\n          name: name,\n          number: number,\n        })\n      );\n    }\n    resetForm();\n  };\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  return (\n    <>\n      <Title>Phonebook</Title>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={scheme}\n      >\n        <ContactsForm>\n          <Text>Name</Text>\n          <Input type=\"text\" name=\"name\" />\n          <Text>Number</Text>\n          <Input type=\"tel\" name=\"number\" />\n          <Button type=\"submit\">Add contact</Button>\n        </ContactsForm>\n      </Formik>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nconst Contacts = styled.ul`\n  width: 400px;\n  margin: 0 auto;\n`;\n\nconst ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  border: 1px solid #0d47a1;\n  padding: 15px;\n  justify-content: space-between;\n  background-color: #fff;\n`;\n\nconst ContactText = styled.p`\n  margin-right: 10px;\n  color: #0d47a1;\n  font-size: 16px;\n  font-weight: 700;\n`;\n\nconst DeleteBtn = styled.button`\n  background-color: #fff;\n  display: inline-block;\n  border: navajowhite;\n  padding: 5px 5px;\n  height: 100%;\n  cursor: pointer;\n  border-radius: 5px;\n  color: #0d47a1;\n  border: 1px solid #0d47a1;\n  transition: 300ms;\n\n  :hover {\n    background-color: #0d47a1;\n    color: #fff;\n  }\n`;\n\nexport { Contacts, ContactItem, ContactText, DeleteBtn };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Contacts,\n  ContactItem,\n  ContactText,\n  DeleteBtn,\n} from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const stateFilter = useSelector(selectFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filterNames = contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(stateFilter);\n  });\n\n  return (\n    <Contacts>\n      {filterNames.length > 0 &&\n        filterNames.map(({ id, name, number }) => (\n          <ContactItem key={id}>\n            <ContactText>\n              {name}: {number}\n            </ContactText>\n            <div>\n              <DeleteBtn\n                type=\"button\"\n                onClick={() => dispatch(deleteContact(id))}\n              >\n                Delete\n              </DeleteBtn>\n            </div>\n          </ContactItem>\n        ))}\n    </Contacts>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nconst LabelBtn = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst InputFilter = styled.input`\n  padding: 5px;\n  width: 100%;\n  margin-top: 10px;\n  margin-bottom: 15px;\n  max-width: 200px;\n`;\n\nconst Title = styled.h1`\n  color: #fff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport { LabelBtn, InputFilter, Title };\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { LabelBtn, InputFilter, Title } from './Filter.styled';\nimport { updateFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { IoIosContact } from 'react-icons/io';\n\nconst Filter = () => {\n  const stateFilter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = e => {\n    dispatch(updateFilter(e.currentTarget.value));\n  };\n\n  return (\n    <>\n      <Title>\n        Contacts <IoIosContact style={{ marginLeft: '10' }} />\n      </Title>\n      <LabelBtn style={{ color: '#fff' }}>\n        Find contacts by name\n        <InputFilter type=\"text\" value={stateFilter} onChange={changeFilter} />\n      </LabelBtn>\n    </>\n  );\n};\n\nexport default Filter;\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\n\nexport default function Contacts() {\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["ContactsForm","styled","Form","Input","Field","Button","Text","Title","selectContacts","state","contacts","selectFilter","filters","scheme","yup","shape","name","required","number","ContactForm","dispatch","useDispatch","useSelector","initialValues","onSubmit","values","resetForm","every","contact","toLowerCase","alert","checkIfNameIsUnique","addContact","validationSchema","type","Contacts","ContactItem","ContactText","DeleteBtn","stateFilter","useEffect","fetchContacts","filterNames","filter","includes","length","map","id","onClick","deleteContact","LabelBtn","InputFilter","style","marginLeft","color","value","onChange","e","updateFilter","currentTarget"],"sourceRoot":""}